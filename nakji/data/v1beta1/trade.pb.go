// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: nakji/data/v1beta1/trade.proto

package data

import (
	decimal "google.golang.org/genproto/googleapis/type/decimal"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// order.Side
type TradeSide int32

const (
	Trade_SIDE_ANY     TradeSide = 0
	Trade_SIDE_BUY     TradeSide = 1
	Trade_SIDE_SELL    TradeSide = 2
	Trade_SIDE_BID     TradeSide = 3
	Trade_SIDE_ASK     TradeSide = 4
	Trade_SIDE_UNKNOWN TradeSide = 5
)

// Enum value maps for TradeSide.
var (
	TradeSide_name = map[int32]string{
		0: "SIDE_ANY",
		1: "SIDE_BUY",
		2: "SIDE_SELL",
		3: "SIDE_BID",
		4: "SIDE_ASK",
		5: "SIDE_UNKNOWN",
	}
	TradeSide_value = map[string]int32{
		"SIDE_ANY":     0,
		"SIDE_BUY":     1,
		"SIDE_SELL":    2,
		"SIDE_BID":     3,
		"SIDE_ASK":     4,
		"SIDE_UNKNOWN": 5,
	}
)

func (x TradeSide) Enum() *TradeSide {
	p := new(TradeSide)
	*p = x
	return p
}

func (x TradeSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeSide) Descriptor() protoreflect.EnumDescriptor {
	return file_nakji_data_v1beta1_trade_proto_enumTypes[0].Descriptor()
}

func (TradeSide) Type() protoreflect.EnumType {
	return &file_nakji_data_v1beta1_trade_proto_enumTypes[0]
}

func (x TradeSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeSide.Descriptor instead.
func (TradeSide) EnumDescriptor() ([]byte, []int) {
	return file_nakji_data_v1beta1_trade_proto_rawDescGZIP(), []int{0, 0}
}

// order.Type
type TradeEventType int32

const (
	Trade_TYPE_ANY                 TradeEventType = 0
	Trade_TYPE_LIMIT               TradeEventType = 1
	Trade_TYPE_MARKET              TradeEventType = 2
	Trade_TYPE_IMMEDIATE_OR_CANCEL TradeEventType = 3
	Trade_TYPE_STOP                TradeEventType = 4
	Trade_TYPE_TRAILING_STOP       TradeEventType = 5
	Trade_TYPE_UNKNOWN             TradeEventType = 6
)

// Enum value maps for TradeEventType.
var (
	TradeEventType_name = map[int32]string{
		0: "TYPE_ANY",
		1: "TYPE_LIMIT",
		2: "TYPE_MARKET",
		3: "TYPE_IMMEDIATE_OR_CANCEL",
		4: "TYPE_STOP",
		5: "TYPE_TRAILING_STOP",
		6: "TYPE_UNKNOWN",
	}
	TradeEventType_value = map[string]int32{
		"TYPE_ANY":                 0,
		"TYPE_LIMIT":               1,
		"TYPE_MARKET":              2,
		"TYPE_IMMEDIATE_OR_CANCEL": 3,
		"TYPE_STOP":                4,
		"TYPE_TRAILING_STOP":       5,
		"TYPE_UNKNOWN":             6,
	}
)

func (x TradeEventType) Enum() *TradeEventType {
	p := new(TradeEventType)
	*p = x
	return p
}

func (x TradeEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_nakji_data_v1beta1_trade_proto_enumTypes[1].Descriptor()
}

func (TradeEventType) Type() protoreflect.EnumType {
	return &file_nakji_data_v1beta1_trade_proto_enumTypes[1]
}

func (x TradeEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeEventType.Descriptor instead.
func (TradeEventType) EnumDescriptor() ([]byte, []int) {
	return file_nakji_data_v1beta1_trade_proto_rawDescGZIP(), []int{0, 1}
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Price      *decimal.Decimal       `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	Amount0In  *decimal.Decimal       `protobuf:"bytes,3,opt,name=amount0_in,json=amount0In,proto3" json:"amount0_in,omitempty"`
	Amount0Out *decimal.Decimal       `protobuf:"bytes,4,opt,name=amount0_out,json=amount0Out,proto3" json:"amount0_out,omitempty"`
	Amount1In  *decimal.Decimal       `protobuf:"bytes,5,opt,name=amount1_in,json=amount1In,proto3" json:"amount1_in,omitempty"`
	Amount1Out *decimal.Decimal       `protobuf:"bytes,6,opt,name=amount1_out,json=amount1Out,proto3" json:"amount1_out,omitempty"`
	Side       *TradeSide             `protobuf:"varint,10,opt,name=Side,proto3,enum=nakji.data.v1beta1.TradeSide,oneof" json:"Side,omitempty"`
	EventType  *TradeEventType        `protobuf:"varint,11,opt,name=EventType,proto3,enum=nakji.data.v1beta1.TradeEventType,oneof" json:"EventType,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakji_data_v1beta1_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_nakji_data_v1beta1_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_nakji_data_v1beta1_trade_proto_rawDescGZIP(), []int{0}
}

func (x *Trade) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Trade) GetPrice() *decimal.Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Trade) GetAmount0In() *decimal.Decimal {
	if x != nil {
		return x.Amount0In
	}
	return nil
}

func (x *Trade) GetAmount0Out() *decimal.Decimal {
	if x != nil {
		return x.Amount0Out
	}
	return nil
}

func (x *Trade) GetAmount1In() *decimal.Decimal {
	if x != nil {
		return x.Amount1In
	}
	return nil
}

func (x *Trade) GetAmount1Out() *decimal.Decimal {
	if x != nil {
		return x.Amount1Out
	}
	return nil
}

func (x *Trade) GetSide() TradeSide {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return Trade_SIDE_ANY
}

func (x *Trade) GetEventType() TradeEventType {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return Trade_TYPE_ANY
}

var File_nakji_data_v1beta1_trade_proto protoreflect.FileDescriptor

var file_nakji_data_v1beta1_trade_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6e, 0x61, 0x6b, 0x6a, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x6e, 0x61, 0x6b, 0x6a, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc6, 0x05, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x30, 0x49, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x4f, 0x75, 0x74, 0x12, 0x33,
	0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x31, 0x49, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0a,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x4f, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x53, 0x69,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6e, 0x61, 0x6b, 0x6a, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x53, 0x69, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6e, 0x61, 0x6b, 0x6a, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x22, 0x5f, 0x0a, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x59,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x4b, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x22, 0x92, 0x01,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x05,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x06, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x53, 0x69, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x61, 0x6b, 0x6a, 0x69, 0x2d, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6e, 0x61, 0x6b, 0x6a, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x3b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_nakji_data_v1beta1_trade_proto_rawDescOnce sync.Once
	file_nakji_data_v1beta1_trade_proto_rawDescData = file_nakji_data_v1beta1_trade_proto_rawDesc
)

func file_nakji_data_v1beta1_trade_proto_rawDescGZIP() []byte {
	file_nakji_data_v1beta1_trade_proto_rawDescOnce.Do(func() {
		file_nakji_data_v1beta1_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_nakji_data_v1beta1_trade_proto_rawDescData)
	})
	return file_nakji_data_v1beta1_trade_proto_rawDescData
}

var file_nakji_data_v1beta1_trade_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nakji_data_v1beta1_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_nakji_data_v1beta1_trade_proto_goTypes = []interface{}{
	(TradeSide)(0),                // 0: nakji.data.v1beta1.Trade.side
	(TradeEventType)(0),           // 1: nakji.data.v1beta1.Trade.event_type
	(*Trade)(nil),                 // 2: nakji.data.v1beta1.Trade
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*decimal.Decimal)(nil),       // 4: google.type.Decimal
}
var file_nakji_data_v1beta1_trade_proto_depIdxs = []int32{
	3, // 0: nakji.data.v1beta1.Trade.ts:type_name -> google.protobuf.Timestamp
	4, // 1: nakji.data.v1beta1.Trade.price:type_name -> google.type.Decimal
	4, // 2: nakji.data.v1beta1.Trade.amount0_in:type_name -> google.type.Decimal
	4, // 3: nakji.data.v1beta1.Trade.amount0_out:type_name -> google.type.Decimal
	4, // 4: nakji.data.v1beta1.Trade.amount1_in:type_name -> google.type.Decimal
	4, // 5: nakji.data.v1beta1.Trade.amount1_out:type_name -> google.type.Decimal
	0, // 6: nakji.data.v1beta1.Trade.Side:type_name -> nakji.data.v1beta1.Trade.side
	1, // 7: nakji.data.v1beta1.Trade.EventType:type_name -> nakji.data.v1beta1.Trade.event_type
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_nakji_data_v1beta1_trade_proto_init() }
func file_nakji_data_v1beta1_trade_proto_init() {
	if File_nakji_data_v1beta1_trade_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nakji_data_v1beta1_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nakji_data_v1beta1_trade_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nakji_data_v1beta1_trade_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nakji_data_v1beta1_trade_proto_goTypes,
		DependencyIndexes: file_nakji_data_v1beta1_trade_proto_depIdxs,
		EnumInfos:         file_nakji_data_v1beta1_trade_proto_enumTypes,
		MessageInfos:      file_nakji_data_v1beta1_trade_proto_msgTypes,
	}.Build()
	File_nakji_data_v1beta1_trade_proto = out.File
	file_nakji_data_v1beta1_trade_proto_rawDesc = nil
	file_nakji_data_v1beta1_trade_proto_goTypes = nil
	file_nakji_data_v1beta1_trade_proto_depIdxs = nil
}
